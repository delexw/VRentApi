<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="VwfscnLog" type="VWFSCN.IT.Log.Configuration.LoggingConfigurationHandler, VWFSCN.IT.Log" />
    <section name="VwfscnLog_Email" type="VWFSCN.IT.Log.Configuration.LoggingConfigurationHandler, VWFSCN.IT.Log" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="UserPasswordGenerator" type="CF.VRent.Common.Entities.UserExt.UserPasswordGenerator, CF.VRent.Common"/>
    <section name="VRentEmail" type="CF.VRent.Email.EmailConfiguration, CF.VRent.Email"/>
  </configSections>
  <VRentEmail templateRootPath="C:\Project\EmailTemplate\" name="VE">
    <host address="mail01.dc.pek.mcon.net" from="test@crm-factory.com.cn" pwd="" async="true">
    </host>
    <addressGroups>
      <addresses name="EndUser">
        <!--added according the end user-->
      </addresses>
      <addresses name="SC">
        <address value="adam.liucrm-factory.com.cn">
        </address>
        <address value="">
        </address>
        <address value="">
        </address>
      </addresses>
      <addresses name="VM">
        <address value="adam.liu@crm-factory.com.cn">
        </address>
        <address value="">
        </address>
        <address value="">
        </address>
      </addresses>
      <addresses name="TestUser">
        <address value="adam.liu@crm-factory.com.cn">
        </address>
        <address value="">
        </address>
        <address value="">
        </address>
      </addresses>
    </addressGroups>
    <templates>
      <!--Fee deduction-->
      <template filePath="Preauthorization_FeeDeduction_Successful.html" typeName="Preauthorization_FeeDeduction_Successful" subject="Test">
      </template>
      <template filePath="Preauthorization_FeeDeduction_Failed.html" typeName="Preauthorization_FeeDeduction_Failed,Preauthorization_FeeDeduction_Failed_SC" subject="Test">
      </template>
      <!--Indirect fee deduction-->
      <template filePath="Preauthorization_IndirectFeeDeduction_Failed.html" typeName="Preauthorization_IndirectFeeDeduction_Failed,Preauthorization_IndirectFeeDeduction_Failed_SC" subject="Test">
      </template>
      <template filePath="Preauthorization_IndirectFeeDeduction_Successful.html" typeName="Preauthorization_IndirectFeeDeduction_Successful" subject="Test">
      </template>
      <template filePath="Preauthorization_IndirectFeeDeduction_Successful.html" typeName="Preauthorization_IndirectFeeRemainder" subject="IndirectFeeDeduction_Successful"></template>
      <!--Preauth-->
      <template filePath="Preauthorization_Preauth_Failed.html" typeName="Preauthorization_Preauth_Failed,Preauthorization_Preauth_Failed_SC" subject="Test">
      </template>
      <template filePath="Preauthorization_Preauth_Successful.html" typeName="Preauthorization_Preauth_Successful" subject="Test">
      </template>
      <!--Preauth cancellation-->
      <template filePath="Preauthorization_PreauthCacellation_Successful.html" typeName="Preauthorization_PreauthCacellation_Successful" subject="Test">
      </template>
      <template filePath="Preauthorization_PreauthCacellation_Failed.html" typeName="Preauthorization_PreauthCacellation_Failed,Preauthorization_PreauthCacellation_Failed_SC" subject="Test">
      </template>
      <!--Preauth completion-->
      <template filePath="Preauthorization_FeeDeduction_Successful.html" typeName="Preauthorization_PreauthComplete_Successful" subject="Test">
      </template>
      <template filePath="Preauthorization_PreauthComplete_Failed.html" typeName="Preauthorization_PreauthComplete_Failed,Preauthorization_PreauthComplete_Failed_SC" subject="Test">
      </template>
      <!--User mgmt-->
      <template filePath="Portal_UserMgmt_CorporateUserCreation.html" typeName="Portal_UserMgmt_CorporateUserCreation" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_License_SC_Approved.html" typeName="Portal_UserMgmt_License_SC_Approved" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_License_SC_Reject.html" typeName="Portal_UserMgmt_License_SC_Reject" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_UserTransfer_VM_Approved.html" typeName="Portal_UserMgmt_UserTransfer_VM_Approved" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_UserTransfer_VM_Reject.html" typeName="Portal_UserMgmt_UserTransfer_VM_Reject" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_UserDeactivation.html" typeName="Portal_UserMgmt_UserDeactivation" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_UserReactivation.html" typeName="Portal_UserMgmt_UserReactivation" subject="Test">
      </template>
      <template filePath="Portal_UserMgmt_UserTransfer_End2Corporate.html" typeName="Portal_UserMgmt_UserTransfer_End2Corporate" subject="Test"></template>
    </templates>
  </VRentEmail>
  <unity>
    <alias alias="IProxyReservation" type="CF.VRent.Contract.IProxyReservation, CF.VRent.Contract" />
    <alias alias="ProxyReservationImpl" type="CF.VRent.BLL.ProxyReservationImpl, CF.VRent.BLL" />
    <alias alias="SystemConfigurationBLL" type="CF.VRent.BLL.SystemConfigurationBLL, CF.VRent.BLL"></alias>
    <!--authentication-->
    <alias alias="PortalUserMgmtAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalUserMgmtAuthenticationBehavior, CF.VRent.BLL"></alias>
    <alias alias="PortalLoginAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalLoginAuthenticationBehavior, CF.VRent.BLL"></alias>
    <alias alias="PortalTermsConditionAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalTermsConditionAuthenticationBehavior, CF.VRent.BLL"></alias>
    <!--kemas-->
    <alias alias="IKemasUser" type="CF.VRent.Entities.KemasWrapper.IKemasUserAPI, CF.VRent.Entities"></alias>
    <alias alias="IKemasConfig" type="CF.VRent.Entities.KemasWrapper.IKemasConfigsAPI, CF.VRent.Entities"></alias>
    <alias alias="IKemasExtensionAPI" type="CF.VRent.Entities.KemasWrapper.IKemasExtensionAPI, CF.VRent.Entities"></alias>
    <alias alias="IKemasReservation" type="CF.VRent.Entities.KemasWrapper.IKemasReservation, CF.VRent.Entities"></alias>
    <!--cache-->
    <alias alias="LongCache" type="CF.VRent.Cache.LongCacheInterceptionBehavior, CF.VRent.Cache"></alias>
    <alias alias="ShortCache" type="CF.VRent.Cache.ShortCacheInterceptionBehavior, CF.VRent.Cache"></alias>
    <alias alias="MidCache" type="CF.VRent.Cache.MidCacheInterceptionBehavior, CF.VRent.Cache"></alias>
    <!--Log-->
    <alias alias="IntercepterLogger" type="CF.VRent.Common.IntercepterLogger, CF.VRent.Common"/>
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
    <!--Data dic-->
    <container name="DataDicContainer">
      <extension type="Interception" />
      <register type="CF.VRent.Contract.IOptionsBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.OptionsBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="LongCache"></interceptionBehavior>
      </register>
    </container>

    <container name="PortalCertificationContainer">
      <extension type="Interception"/>
      <register type="CF.VRent.BLL.ReservationAOP.IPortalCertification, CF.VRent.BLL" mapTo="CF.VRent.BLL.ReservationAOP.PortalCertification, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
    </container>
    <container name="ReservationContainer">
      <extension type="Interception" />
      <register type="IProxyReservation" mapTo="ProxyReservationImpl">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.ReservationInterceptionBehavior, CF.VRent.BLL" />
      </register>
    </container>
    <container name="IndirectFeeContainer">
      <extension type="Interception" />
      <register type="CF.VRent.Contract.IIndirectFeeOperation, CF.VRent.Contract" mapTo="CF.VRent.BLL.IndirectFeeBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.IndirectFeeOperationInterceptionBehavior, CF.VRent.BLL" />
      </register>
    </container>
    <container name="PaymentContainer">
      <extension type="Interception"/>
      <register type="CF.VRent.Contract.IPayment, CF.VRent.Contract" mapTo="CF.VRent.BLL.PaymentBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
    </container>
    <container name="KemasApiWapperContainer">
      <extension type="Interception" />
      <register type="IKemasUser" mapTo="CF.VRent.Entities.KemasWrapper.KemasUserAPIProxy, CF.VRent.Entities">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
      <register type="IKemasConfig" mapTo="CF.VRent.Entities.KemasWrapper.KemasConfigsAPIProxy, CF.VRent.Entities">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ShortCache" />
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
      <register type="IKemasExtensionAPI" mapTo="CF.VRent.Entities.KemasWrapper.KemasExtensionAPI, CF.VRent.Entities">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="LongCache" />
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
      <register type="IKemasReservation" mapTo="CF.VRent.Entities.KemasWrapper.KemasReservationAPIProxy, CF.VRent.Entities">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
    </container>
    <container name="UserMgmtContainer">
      <extension type="Interception" />
      <register type="CF.VRent.Contract.IUserMgmt, CF.VRent.Contract" mapTo="CF.VRent.BLL.UserManagementBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="PortalUserMgmtAuthentication" />
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.Cache.UserMgmtCacheBehavior, CF.VRent.BLL" />
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.UserMgmtInterceptionBehavior, CF.VRent.BLL" />
      </register>
      <register type="CF.VRent.Contract.ICompany, CF.VRent.Contract" mapTo="SystemConfigurationBLL" name="CompanyConfiguration">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="PortalUserMgmtAuthentication" />
      </register>
      <register type="CF.VRent.Contract.ISystemConfiguration, CF.VRent.Contract" mapTo="SystemConfigurationBLL" name="UserStatusConfiguration">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="PortalUserMgmtAuthentication" />
      </register>
      <register type="CF.VRent.Contract.IPortalLoginBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.PortalUserLoginBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="PortalLoginAuthentication" />
      </register>
      <register type="CF.VRent.UserStatus.Interfaces.IUserStatusManager, CF.VRent.UserStatus" mapTo="CF.VRent.UserStatus.UserStatusManager, CF.VRent.UserStatus">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
      <register type="CF.VRent.UserRole.Interfaces.IUserRoleManager, CF.VRent.UserRole" mapTo="CF.VRent.UserRole.UserRoleManager, CF.VRent.UserRole">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
      <register type="CF.VRent.UserCompany.Interfaces.IUserCompanyManager, CF.VRent.UserCompany" mapTo="CF.VRent.UserCompany.UserCompanyManager, CF.VRent.UserCompany">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
      </register>
    </container>
    <container name="TermsConditionContainer">
      <extension type="Interception" />
      <register type="CF.VRent.Contract.ITermsCondition, CF.VRent.Contract" mapTo="CF.VRent.BLL.TermsConditionBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="PortalTermsConditionAuthentication" />
      </register>
    </container>
    <container name="UserRegistrationContainer">
      <extension type="Interception" />
      <register type="CF.VRent.Contract.IAppRegistrationBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.AppRegistrationBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.AppRegistrationInterceptionBehavior, CF.VRent.BLL"/>
      </register>
    </container>
    <container name="ClientsContainer">
      <extension type="Interception" />
      <register type="CF.VRent.BLL.ICompanyBLL, CF.VRent.BLL" mapTo="CF.VRent.BLL.CompanyBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.ClientInterceptionBehavior, CF.VRent.BLL"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.Cache.ClientCacheBehavior, CF.VRent.BLL"/>
      </register>
    </container>
    <container name="UnionPayFunctionalityContainer">
      <extension type="Interception"/>
      <register type="CF.VRent.UPSDK.IUnionPayUtils, CF.VRent.UPSDK" mapTo="CF.VRent.UPSDK.UnionPayUtils, CF.VRent.UPSDK">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.UPSDK.Interception.UnionPayFunctionalityInterceptionBehavior, CF.VRent.UPSDK"/>
      </register>
    </container>
    <container name="TransactionContainer">
      <extension type="Interception"/>
      <register type="CF.VRent.Contract.ITransaction, CF.VRent.Contract" mapTo="CF.VRent.BLL.TransactionBLL, CF.VRent.BLL">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="IntercepterLogger"/>
        <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.TransactionInterceptionBehavior, CF.VRent.BLL"/>
      </register>
    </container>
  </unity>

  <!--User password-->
  <UserPasswordGenerator enabled="true" length="6"></UserPasswordGenerator>
  <appSettings>
    <add key="ProxyListenerAddress" value="http://localhost/Proxy" />
    <!--UPSDK config-->
    <!--Test config-->
    <!-- Cert Path PM_700000000000001_acp.pfx-->
    <add key="sdk.signCert.path" value="C:\Project\certs\PM_700000000000001_acp.pfx" />
    <!-- Cert pwd -->
    <add key="sdk.signCert.pwd" value="000000" />
    <!-- Cert Type -->
    <add key="sdk.signCert.type" value="PKCS12" />
    <!-- Encrypt cert path -->
    <add key="sdk.encryptCert.path" value="C:\Project\certs\encrypt.cer" />
    <!-- Validation cert root path -->
    <add key="sdk.validateCert.dir" value="C:\Project\certs\" />
    <!-- FrontEnd trade url -->
    <add key="sdk.frontTransUrl" value="https://101.231.204.80:5000/gateway/api/frontTransReq.do" />
    <!-- BackEnd trade url -->
    <add key="sdk.backTransUrl" value="https://101.231.204.80:5000/gateway/api/backTransReq.do" />
    <!-- Trade status query url -->
    <add key="sdk.singleQueryUrl" value="https://101.231.204.80:5000/gateway/api/queryTrans.do" />
    <!-- File transfer url -->
    <add key="sdk.fileTransUrl" value="https://101.231.204.80:5000/gateway/api/fileTransRequest.do" />
    <!-- Batch payment url -->
    <add key="sdk.batTransUrl" value="https://101.231.204.80:5000/gateway/api/batchTrans.do" />
    <!-- Card payment url -->
    <add key="sdk.cardRequestUrl" value="https://101.231.204.80:5000/gateway/api/cardTransReq.do" />
    <!-- App payment url -->
    <add key="sdk.appRequestUrl" value="https://101.231.204.80:5000/gateway/api/appTransReq.do" />
    <add key="MERACCOUNT" value="898111475190101" />
    <add key="MERTRID" value="62000000001" />
    <add key="MERTOKENTYPE" value="01" />
    <!--preauthorizaiton callback-->
    <add key="UnionPayListenerAddress" value="http://booking-vrent.mcon.net/AdamUPT" />
    <add key="proxyAddress" value="" />
    <add key="proxyCredentialUserName" value="" />
    <add key="proxyCredentialPassword" value="" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />


    <add key="IOS" value="www.baidu.com"/>
    <add key="Android" value="www.baidu.com"/>
    <add key="VRentUrl" value=""/>
    <add key="EnableLogView" value="true"/>

    <add key="PreviewJobDay" value="23"/>
    <add key="FinalJobDay" value="30"/>
    <add key="PaymentPeriod" value="25"/>
    <add key="BillingLag" value="1"/>
  
  </appSettings>
  <connectionStrings>
    <add name="SQLConnString" connectionString="server=172.21.216.21;database=AdamTest;uid=sa;pwd=H2yAts77" />
  </connectionStrings>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_IFapiaoPreferenceService" />
        <binding name="BasicHttpBinding_IDataService" maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647"/>
        <binding name="BasicHttpBinding_IPaymentService" />
        <binding name="WSKemasAuthBinding" />
        <binding name="WSKemasCatalogBinding" />
        <binding name="WSKemasConfigBinding" />
        <binding name="WSKemasReservationBinding" maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />
        <binding name="WSKemasUserBinding" maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />
        <binding name="WSKemasReservation2Binding" maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />
        <binding name="WSKemasUser2Binding" maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />
        <binding name="WSKemasConfig2Binding" />
        <binding name="BasicHttpBinding_IBigFileReceiverService" closeTimeout="01:00:00"
      openTimeout="01:00:00" receiveTimeout="01:00:00" sendTimeout="01:00:00"
      maxBufferPoolSize="2147483" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647"
      transferMode="Streamed">
          <readerQuotas maxDepth="128" maxStringContentLength="2147483647"
            maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
        </binding>
        <binding name="BasicHttpBinding_IAccountingService" maxBufferPoolSize="2147483647" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" />
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address="http://localhost:8011/DataService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IDataService" contract="DataAccessProxy.IDataService" name="BasicHttpBinding_IDataService" />
      <endpoint address="http://localhost:8011/FapiaoPreferenceService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IFapiaoPreferenceService" contract="FapiaoPreferenceProxy.IFapiaoPreferenceService" name="BasicHttpBinding_IFapiaoPreferenceService" />
      <endpoint address="http://localhost:8011/PaymentService.svc" binding="basicHttpBinding" contract="PaymentService.IPaymentService" name="BasicHttpBinding_IPaymentService">
      </endpoint>
      <endpoint address="http://localhost:8011/BigFileService.svc"
    binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IBigFileReceiverService"
    contract="BigFileService.IBigFileService" name="BasicHttpBinding_IBigFileReceiverService" />
      <endpoint address="http://localhost:8011/AccountingService.svc"
      binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IAccountingService"
      contract="AccountingService.IAccountingService" name="BasicHttpBinding_IAccountingService" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carpoolnet/services/customer_soap/vwnms/?auth" binding="basicHttpBinding" bindingConfiguration="WSKemasAuthBinding" contract="KEMASWSIF_AUTHRef.WSKemasPortType" name="KemasPort" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carpoolnet/services/customer_soap/vwnms/?catalog" binding="basicHttpBinding" bindingConfiguration="WSKemasCatalogBinding" contract="KEMASWSIF_CATALOGRef.WSKemasPortType" name="KemasPort1" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carpoolnet/services/customer_soap/vwnms/?config" binding="basicHttpBinding" bindingConfiguration="WSKemasConfigBinding" contract="KEMASWSIF_CONFIGRef.WSKemasPortType" name="KemasPort2" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carsharing/services/customer_soap/vwnms/?config" binding="basicHttpBinding" bindingConfiguration="WSKemasConfig2Binding" contract="KEMASWSIF_CONFIGRef.WSKemasPortType2" name="KemasConfigPort2" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carpoolnet/services/customer_soap/vwnms/?reservation" binding="basicHttpBinding" bindingConfiguration="WSKemasReservationBinding" contract="KEMASWSIF_RESERVATIONRef.WSKemasPortType" name="KemasPort3" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carsharing/services/customer_soap/vwnms/?reservation" binding="basicHttpBinding" bindingConfiguration="WSKemasReservation2Binding" contract="KEMASWSIF_RESERVATIONRef.WSKemasPortType2" name="kemasPort2" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carpoolnet/services/customer_soap/vwnms/?user" binding="basicHttpBinding" bindingConfiguration="WSKemasUserBinding" contract="KEMASWSIF_USERRef.WSKemasPortType" name="KemasPort4" />
      <endpoint address="http://download.kemas.de:80/kmn/applications/carsharing/services/customer_soap/vwnms/?user" binding="basicHttpBinding" bindingConfiguration="WSKemasUser2Binding" contract="KEMASWSIF_USERRef.WSKemasUserPortType" name="KemasUser2Port" />
    </client>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
    <standardEndpoints>
      <webHttpEndpoint>
        <!-- 
            Configure the WCF REST service base address via the global.asax.cs file and the default endpoint 
            via the attributes on the <standardEndpoint> element below
        -->
        <standardEndpoint name="" helpEnabled="false" automaticFormatSelectionEnabled="false" />
      </webHttpEndpoint>
    </standardEndpoints>
  </system.serviceModel>
  <VwfscnLog>
    <listeners>
      <add name="textListener" type="text" folder="C:\vrent\log" fileName="UT.txt" />
      <!--<add name="l2" type="database" connectionString="Server=10.42.69.102;Database=CENTRAL_LOG;uid=sa;pwd=zaq12wsx;"/>-->
    </listeners>
    <filters minSeverity="low" maxLengthOfLogQueue="10000"/>
  </VwfscnLog>
  <VwfscnLog_Email>
    <listeners>
      <add name="textListener" type="text" folder="C:\vrent\log\" fileName="Email.txt" />
    </listeners>
    <filters minSeverity="low" maxLengthOfLogQueue="10000"/>
  </VwfscnLog_Email>
</configuration>