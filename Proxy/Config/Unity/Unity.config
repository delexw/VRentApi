<unity>
  <alias alias="IProxyReservation" type="CF.VRent.Contract.IProxyReservation, CF.VRent.Contract" />
  <alias alias="ProxyReservationImpl" type="CF.VRent.BLL.ProxyReservationImpl, CF.VRent.BLL" />
  <alias alias="SystemConfigurationBLL" type="CF.VRent.BLL.SystemConfigurationBLL, CF.VRent.BLL"></alias>
  <!--authentication-->
  <alias alias="PortalUserMgmtAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalUserMgmtAuthenticationBehavior, CF.VRent.BLL"></alias>
  <alias alias="PortalLoginAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalLoginAuthenticationBehavior, CF.VRent.BLL"></alias>
  <alias alias="PortalTermsConditionAuthentication" type="CF.VRent.BLL.ReservationAOP.PortalTermsConditionAuthenticationBehavior, CF.VRent.BLL"></alias>
  <alias alias="PortalTransactionAuthentication" type="CF.VRent.BLL.ReservationAOP.Authentication.PortalTransactionAuthenticationBehavior, CF.VRent.BLL"></alias>
  <!--kemas-->
  <alias alias="IKemasUser" type="CF.VRent.Entities.KemasWrapper.IKemasUserAPI, CF.VRent.Entities"></alias>
  <alias alias="IKemasConfig" type="CF.VRent.Entities.KemasWrapper.IKemasConfigsAPI, CF.VRent.Entities"></alias>
  <alias alias="IKemasExtensionAPI" type="CF.VRent.Entities.KemasWrapper.IKemasExtensionAPI, CF.VRent.Entities"></alias>
  <alias alias="IKemasReservation" type="CF.VRent.Entities.KemasWrapper.IKemasReservation, CF.VRent.Entities"></alias>
  <!--cache-->
  <alias alias="LongCache" type="CF.VRent.Cache.LongCacheInterceptionBehavior, CF.VRent.Cache"></alias>
  <alias alias="ShortCache" type="CF.VRent.Cache.ShortCacheInterceptionBehavior, CF.VRent.Cache"></alias>
  <alias alias="MidCache" type="CF.VRent.Cache.MidCacheInterceptionBehavior, CF.VRent.Cache"></alias>
  <!--Log-->
  <alias alias="IntercepterLogger" type="CF.VRent.Common.IntercepterLogger, CF.VRent.Common"/>
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
  <!--Data dic-->
  <container name="DataDicContainer">
    <extension type="Interception" />
    <register type="CF.VRent.Contract.IOptionsBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.OptionsBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="LongCache"></interceptionBehavior>
    </register>
  </container>

  <container name="PortalCertificationContainer">
    <extension type="Interception"/>
    <register type="CF.VRent.BLL.ReservationAOP.IPortalCertification, CF.VRent.BLL" mapTo="CF.VRent.BLL.ReservationAOP.PortalCertification, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
  </container>
  <container name="ReservationContainer">
    <extension type="Interception" />
    <register type="IProxyReservation" mapTo="ProxyReservationImpl">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.ReservationInterceptionBehavior, CF.VRent.BLL" />
    </register>
  </container>
  <container name="IndirectFeeContainer">
    <extension type="Interception" />
    <register type="CF.VRent.Contract.IIndirectFeeOperation, CF.VRent.Contract" mapTo="CF.VRent.BLL.IndirectFeeBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.IndirectFeeOperationInterceptionBehavior, CF.VRent.BLL" />
    </register>
  </container>
  <container name="PaymentContainer">
    <extension type="Interception"/>
    <register type="CF.VRent.Contract.IPayment, CF.VRent.Contract" mapTo="CF.VRent.BLL.PaymentBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
  </container>
  <container name="KemasApiWapperContainer">
    <extension type="Interception" />
    <register type="IKemasUser" mapTo="CF.VRent.Entities.KemasWrapper.KemasUserAPIProxy, CF.VRent.Entities">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
    <register type="IKemasConfig" mapTo="CF.VRent.Entities.KemasWrapper.KemasConfigsAPIProxy, CF.VRent.Entities">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="ShortCache" />
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
    <register type="IKemasExtensionAPI" mapTo="CF.VRent.Entities.KemasWrapper.KemasExtensionAPI, CF.VRent.Entities">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="LongCache" />
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
    <register type="IKemasReservation" mapTo="CF.VRent.Entities.KemasWrapper.KemasReservationAPIProxy, CF.VRent.Entities">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
  </container>
  <container name="UserMgmtContainer">
    <extension type="Interception" />
    <register type="CF.VRent.Contract.IUserMgmt, CF.VRent.Contract" mapTo="CF.VRent.BLL.UserManagementBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalUserMgmtAuthentication" />
      <!--<interceptionBehavior type="CF.VRent.BLL.ReservationAOP.Cache.UserMgmtCacheBehavior, CF.VRent.BLL" />-->
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.UserMgmtInterceptionBehavior, CF.VRent.BLL" />
    </register>
    <register type="CF.VRent.Contract.ICompany, CF.VRent.Contract" mapTo="SystemConfigurationBLL" name="CompanyConfiguration">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalUserMgmtAuthentication" />
    </register>
    <register type="CF.VRent.Contract.ISystemConfiguration, CF.VRent.Contract" mapTo="SystemConfigurationBLL" name="UserStatusConfiguration">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalUserMgmtAuthentication" />
    </register>
    <register type="CF.VRent.Contract.IPortalLoginBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.PortalUserLoginBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalLoginAuthentication" />
    </register>
    <register type="CF.VRent.UserStatus.Interfaces.IUserStatusManager, CF.VRent.UserStatus" mapTo="CF.VRent.UserStatus.UserStatusManager, CF.VRent.UserStatus">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
    <register type="CF.VRent.UserRole.Interfaces.IUserRoleManager, CF.VRent.UserRole" mapTo="CF.VRent.UserRole.UserRoleManager, CF.VRent.UserRole">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
    <register type="CF.VRent.UserCompany.Interfaces.IUserCompanyManager, CF.VRent.UserCompany" mapTo="CF.VRent.UserCompany.UserCompanyManager, CF.VRent.UserCompany">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
  </container>
  <container name="TermsConditionContainer">
    <extension type="Interception" />
    <register type="CF.VRent.Contract.ITermsCondition, CF.VRent.Contract" mapTo="CF.VRent.BLL.TermsConditionBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalTermsConditionAuthentication" />
    </register>
  </container>
  <container name="UserRegistrationContainer">
    <extension type="Interception" />
    <register type="CF.VRent.Contract.IAppRegistrationBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.AppRegistrationBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.AppRegistrationInterceptionBehavior, CF.VRent.BLL"/>
    </register>
  </container>
  <container name="ClientsContainer">
    <extension type="Interception" />
    <register type="CF.VRent.BLL.ICompanyBLL, CF.VRent.BLL" mapTo="CF.VRent.BLL.CompanyBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.ClientInterceptionBehavior, CF.VRent.BLL"/>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.Cache.ClientCacheBehavior, CF.VRent.BLL"/>
    </register>
  </container>
  <container name="UnionPayFunctionalityContainer">
    <extension type="Interception"/>
    <register type="CF.VRent.UPSDK.IUnionPayUtils, CF.VRent.UPSDK" mapTo="CF.VRent.UPSDK.UnionPayUtils, CF.VRent.UPSDK">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="CF.VRent.UPSDK.Interception.UnionPayFunctionalityInterceptionBehavior, CF.VRent.UPSDK"/>
    </register>
  </container>
  <container name="TransactionContainer">
    <extension type="Interception"/>
    <register type="CF.VRent.Contract.ITransaction, CF.VRent.Contract" mapTo="CF.VRent.BLL.TransactionBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
      <interceptionBehavior type="PortalTransactionAuthentication"></interceptionBehavior>
      <interceptionBehavior type="CF.VRent.BLL.ReservationAOP.TransactionInterceptionBehavior, CF.VRent.BLL"/>
    </register>
  </container>
  <container name="GeneralLedgerContainer">
    <extension type="Interception"/>
    <register type="CF.VRent.Contract.IGeneralLedgerBLL, CF.VRent.Contract" mapTo="CF.VRent.BLL.GeneralLedgerBLL, CF.VRent.BLL">
      <interceptor type="InterfaceInterceptor"/>
      <interceptionBehavior type="IntercepterLogger"/>
    </register>
  </container>
</unity>
